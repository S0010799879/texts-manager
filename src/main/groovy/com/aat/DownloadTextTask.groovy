package com.aat

import com.android.build.gradle.api.ApplicationVariant
import groovy.json.JsonSlurper
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction

class DownloadTextTask extends DefaultTask {

    ApplicationVariant applicationVariant
    String variantName
    TextPluginExtension textPluginExt
    def ws

    DownloadTextTask() {
        super()
    }

    @TaskAction
    def load() throws IOException {
        textPluginExt = project.texts
        if (textPluginExt.ws) {
            initWsUrl()
            textPluginExt.languages.add(textPluginExt.defaultLanguage)
            textPluginExt.languages.each {
                loadTextWithLang(it.toLowerCase())
            }
        }
    }

    public void loadTextWithLang(String lang) {
        println "WS : " + ws
        def json = new JsonSlurper().parseText(ws.getText(
            requestProperties: [Accept: 'application/json', language: lang, translateKey: '%_$s']
        ))
        def dir = 'values';
        if (!lang.equals(textPluginExt.defaultLanguage)) {
            dir = 'values-' + lang
        }
        String currentDir = new File(".").getAbsoluteFile().getParent()
        currentDir = currentDir + '/app/src/main/res/'

        File myDir = new File(currentDir + dir);
        if (!myDir.exists()) {
            myDir.mkdirs();
        }
        File file = new File(myDir.getAbsolutePath() + File.separator + 'strings.xml')
        file.write '<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n'
        file << '<!-- DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED BY groovy script made by aat -->\n\n'
        file << "<resources>\n"

        def texts = json.data.texts
        if (textPluginExt.alphabeticallySort) {
            texts.sort {
                it.key.toLowerCase()
            }
        }
        if (textPluginExt.removeDuplicate) {
            texts.unique {
                it.key.trim()
            }
        }
        texts.each { myText ->
            if (myText.id != null && myText.value != null) {
                if (!myText.key.matches("\\d.*")) {  // key must not start with a digit
                    if (myText.value.contains("&")) {
                        myText.value = myText.value.replaceAll("&", "&amp;")
                    } else if (myText.value.contains("'")) {
                        myText.value = myText.value.replaceAll("'", "\\\\'")
                    }
                    file << "    <string name=\"${myText.key.trim()}\">$myText.value</string>\n"
                }
            }
        }

        // Theses keys will be addded by customer later
        if (lang == textPluginExt.defaultLanguage && textPluginExt.missingKeys != null) {
            file << '    <!-- Keys added by user -->\n'
            def values = textPluginExt.missingKeys.tokenize('\n')
            // Add indentation of 4 spaces
            values.each { missingKey ->
                file << '    ' + missingKey.trim() + '\n'
            }
            // file << textPluginExt.missingKeys
        }
        file << '</resources>'
        println "We've done with [" + lang + ']'
    }

    private void initWsUrl() {
        String wsUrl = textPluginExt.ws
        if (textPluginExt.variantToWs) {
            if (textPluginExt.variantToWs[variantName]) {
                wsUrl = textPluginExt.variantToWs[variantName]
            }
        }
        ws = new URL(wsUrl)
    }
}

