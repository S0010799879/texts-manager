package com.aat

import com.android.build.gradle.api.ApplicationVariant
import groovy.json.JsonSlurper
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction

import groovyx.net.http.HTTPBuilder
import groovyx.net.http.EncoderRegistry
import static groovyx.net.http.Method.GET
import static groovyx.net.http.Method.POST
import static groovyx.net.http.ContentType.TEXT
import static groovyx.net.http.ContentType.URLENC

class DownloadTextTask extends DefaultTask {

    ApplicationVariant applicationVariant
    String variantName
    TextPluginExtension textPluginExt
    def ws

    DownloadTextTask() {
        super()
    }

    @TaskAction
    def load() throws IOException {
        textPluginExt = project.texts
        if (textPluginExt.ws) {
            initWsUrl()
            textPluginExt.languages.add(textPluginExt.defaultLanguage)
            textPluginExt.languages.each {
                loadTextWithLang(it.toLowerCase())
            }
        } else if (textPluginExt.gSheetClientId) {
            callSheetApi()
        }
    }

    public void loadTextWithLang(String lang) {
        println "WS : " + ws
        def content = new HTTPBuilder(ws.toString()).request(GET, TEXT) { req ->
            headers.'accept' = 'application/json'
            headers.'language' = lang
            headers.'translateKey' = '%_$s'

            response.success = { resp, reader ->
                // println reader.text
                reader.text
            }

            response.failure = { resp, reader ->
                println resp.statusLine
                println 'Impossible to download texts ...'
            }
        }
        if (content) {
            def json = new JsonSlurper().parseText(content)
            def dir = 'values';
            if (!lang.equals(textPluginExt.defaultLanguage)) {
                dir = 'values-' + lang
            }
            // TODO improve that
            // If we run from cmd line -> no problem
            // but from IDE path is wrong
            String currentDir = new File(".").getAbsoluteFile().getParent()
            currentDir = currentDir + '/app/src/main/res/'

            File myDir = new File(currentDir + dir);
            println 'Dir : ' + myDir
            if (!myDir.exists()) {
                myDir.mkdirs()
            }
            File file = new File(myDir.getAbsolutePath() + File.separator + 'strings.xml')
            file.write '<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n'
            file << '<!-- DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED BY groovy script made by aat -->\n\n'
            file << '<resources>\n'

            def texts = json.data.texts
            if (textPluginExt.alphabeticallySort) {
                texts.sort {
                    it.key.toLowerCase()
                }
            }
            if (textPluginExt.removeDuplicate) {
                texts.unique {
                    it.key.trim()
                }
            }

            texts.each { myText ->
                if (myText.key != null && myText.value != null) {
                    myText.key = myText.key.trim()
                    if (textPluginExt.removeBadKeys && myText.key.contains(" ")) {
                        return
                    } else if (!myText.key.matches("\\d.*")) {  // key must not start with a digit
                        if (myText.value.contains("&")) {
                            myText.value = myText.value.replaceAll("&", "&amp;")
                        }
                        if (myText.value.contains("'")) {
                            myText.value = myText.value.replaceAll("'", "\\\\'")
                        }

                        // Add formatted="false" if text contains %
                        // But we do not handle %1$s
                        def pattern = /.*%[0-9]\$.*/
                        if (myText.value.contains('%') && !(myText.value ==~ pattern)) {
                            myText.key = myText.key + '" formatted="false'
                        }
                        file << "    <string name=\"${myText.key.trim()}\">$myText.value</string>\n"
                    }
                }
            }

            // Theses keys will be addded by customer later
            if (lang == textPluginExt.defaultLanguage && textPluginExt.missingKeys != null) {
                file << '    <!-- Keys added by user -->\n'
                def values = textPluginExt.missingKeys.tokenize('\n')
                // Add indentation of 4 spaces
                values.each { missingKey ->
                    file << '    ' + missingKey.trim() + '\n'
                }
                // file << textPluginExt.missingKeys
            }
            file << '</resources>'
            println "We've done with [" + lang + ']'
        } else {
            println 'Content is null or empty'
        }
    }

    public void callSheetApi() {
        // https://developers.google.com/identity/protocols/OAuth2WebServer
        // String oauthUrl = 'https://accounts.google.com/o/oauth2/v2/auth?response_type=token&client_id=' + textPluginExt.gSheetClientId + '&redirect_uri=https%3A%2F%2Foauth2-login-demo.appspot.com%2Fcode&scope=https://www.googleapis.com/auth/drive'
        String oauthUrl = 'https://accounts.google.com/o/oauth2/device/code'
        println 'Url : ' + oauthUrl

        def code = new HTTPBuilder(oauthUrl).request(POST, URLENC) { req ->
            // headers.'Content-Type' = 'application/x-www-form-urlencoded'
            body = [client_id: textPluginExt.gSheetClientId, scope: 'https://docs.google.com/feeds']

            headers.'Accept' = 'application/json'
            headers.'Content-Type' = 'application/x-www-form-urlencoded'
            response.success = { resp, reader ->
                def stream
                println 'Status : ' + resp.statusLine
                println 'Stream : ' + reader
                reader.each { key, value ->
                    println 'Key : ' + key
                    println 'Value : ' + value
                    stream = key
                }
                println 'device_code : ' + reader.device_code
                println 'Class : ' + reader.getClass()
                println reader.text
                stream
            }
            response.failure = { resp, reader ->
                println resp.statusLine
                println reader.text
            }
        }

        if (code) {
            println 'JSON is good'
            def json = new JsonSlurper().parseText(code)
            println 'Device code : ' + json.device_code
        } else {
            println 'An error occurred !'
        }

        /*def content = new HTTPBuilder(ws.toString()).request(GET, TEXT) { req ->
            headers.'accept' = 'application/json'
            response.success = { resp, reader ->
                println resp.statusLine
                println reader.text
            }
            response.failure = { resp, reader ->
                println resp.statusLine
                println reader.text
            }
        }*/
    }

    private void initWsUrl() {
        String wsUrl = textPluginExt.ws
        if (textPluginExt.variantToWs) {
            if (textPluginExt.variantToWs[variantName]) {
                wsUrl = textPluginExt.variantToWs[variantName]
            }
        }
        ws = new URL(wsUrl)
    }
}

